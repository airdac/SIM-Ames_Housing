# Upper/lower severe thresholds
utso <- as.numeric(ss[5]+3*(ss[5]-ss[2]))
ltso <- as.numeric(ss[2]-3*(ss[5]-ss[2]))
return (which((data>utso)|(data<ltso)))
}
par(mfrow=c(1,2))
for (var in id_num_val) {
train[severe_outliers(train[,var]),var] <- NA
Boxplot(train[,var], ylab = var, main = "Train")
test[severe_outliers(test[,var]),var] <- NA
Boxplot(test[,var], ylab = var, main = "Test")
}
par(mfrow=c(1,1))
train = train[-severe_outliers(train$SalePrice),]
Boxplot(train$SalePrice)
corrplot(cor(train_num))
# In the multivariate outlier, as this is stochastic, we cannot plot all the features. After several attempts, the best combination is below
corrplot(cor(train_num))
id_num_val
# Moutlier gives an error if we use all numerical variables, so we won't use highly correlated variables
id_num_val_not_corr = c(4,5,20,35,45,57,67,68,77)
corrplot(cor(train[,id_num_val_not_corr]))
id_num_val_not_corr = c(20,35)
corrplot(cor(train[,id_num_val_not_corr]))
res.mout <- Moutlier(train[,id_num_val_not_corr], quantile = 0.95)
# In the multivariate outlier, as this is stochastic, we cannot plot all the features. After several attempts, the best combination is below
corrplot(cor(train_num))
id_num_val
# Moutlier gives an error if we use all numerical variables, so we won't use highly correlated variables
id_num_val_not_corr = c(4,5,20,35,45,57,67,68,77)
corrplot(cor(train[,id_num_val_not_corr]))
id_num_val_not_corr = c(20,35)
corrplot(cor(train[,id_num_val_not_corr]))
res.mout <- Moutlier(train[,id_num_val_not_corr], quantile = 0.95)
# In the multivariate outlier, as this is stochastic, we cannot plot all the features. After several attempts, the best combination is below
corrplot(cor(train_num))
id_num_val
# Moutlier gives an error if we use all numerical variables, so we won't use highly correlated variables
id_num_val_not_corr = c(4,5,20,35,45,57,67,68,77)
corrplot(cor(train[,id_num_val_not_corr]))
id_num_val_not_corr = c(20,35)
corrplot(cor(train[,id_num_val_not_corr]))
res.mout <- Moutlier(train[,id_num_val_not_corr], quantile = 0.95)
# In the multivariate outlier, as this is stochastic, we cannot plot all the features. After several attempts, the best combination is below
corrplot(cor(train_num))
id_num_val
# Moutlier gives an error if we use all numerical variables, so we won't use highly correlated variables
id_num_val_not_corr = c(4,5,20,35,45,57,67,68,77)
corrplot(cor(train[,id_num_val_not_corr]))
id_num_val_not_corr = c(20,35)
corrplot(cor(train[,id_num_val_not_corr]))
res.mout <- Moutlier(train[,id_num_val_not_corr], quantile = 0.95)
# In the multivariate outlier, as this is stochastic, we cannot plot all the features. After several attempts, the best combination is below
corrplot(cor(train_num))
id_num_val
# Moutlier gives an error if we use all numerical variables, so we won't use highly correlated variables
id_num_val_not_corr = c(4,5,20,35,45,57,67,68,77)
corrplot(cor(train[,id_num_val_not_corr]))
id_num_val_not_corr = c(20,35)
corrplot(cor(train[,id_num_val_not_corr]))
res.mout <- Moutlier(train[,id_num_val_not_corr], quantile = 0.95)
# In the multivariate outlier, as this is stochastic, we cannot plot all the features. After several attempts, the best combination is below
corrplot(cor(train_num))
id_num_val
# Moutlier gives an error if we use all numerical variables, so we won't use highly correlated variables
id_num_val_not_corr = c(4,5,20,35,45,57,67,68,77)
corrplot(cor(train[,id_num_val_not_corr]))
id_num_val_not_corr = c(20,35)
corrplot(cor(train[,id_num_val_not_corr]))
res.mout <- Moutlier(train[,id_num_val_not_corr], quantile = 0.95)
corrplot(cor(train[,id_num_val_not_corr]))
corrplot(cor(train[,id_num_val_not_corr]))
id_num_val_not_corr = c(20,35)
corrplot(cor(train[,id_num_val_not_corr]))
res.mout <- Moutlier(train[,id_num_val_not_corr], quantile = 0.95)
id_num_val_not_corr = c(4,5,20,35,45,57,67,68,77)
corrplot(cor(train[,id_num_val_not_corr]))
id_num_val_not_corr = c(20,35)
corrplot(cor(train[,id_num_val_not_corr]))
res.mout <- Moutlier(train[,id_num_val_not_corr], quantile = 0.95)
train[,id_num_val_not_corr]
id_num_val_not_corr = c(4,5,20,35,45,57,67,68,77)
corrplot(cor(train[,id_num_val_not_corr]))
res.mout <- Moutlier(train[,id_num_val_not_corr], quantile = 0.95)
id_num_val_not_corr = c(20,35)
res.mout <- Moutlier(train[,id_num_val_not_corr], quantile = 0.95)
id_num_val_not_corr = c(4,5,20,35,45,57,67,68,77)
corrplot(cor(train[,id_num_val_not_corr]))
corrplot(cor(train_num))
id_num_val
res.mout <- Moutlier(train[,id_num_val_not_corr], quantile = 0.95)
id_num_val_not_corr = c(4,5,20,35,45,57,67,68)
res.mout <- Moutlier(train[,id_num_val_not_corr], quantile = 0.95)
id_num_val_not_corr = c(4,5,20,35,45,57,67)
res.mout <- Moutlier(train[,id_num_val_not_corr], quantile = 0.95)
id_num_val_not_corr = c(4,5,20,35,45,57)
res.mout <- Moutlier(train[,id_num_val_not_corr], quantile = 0.95)
id_num_val_not_corr = c(4,5,20,35,45)
res.mout <- Moutlier(train[,id_num_val_not_corr], quantile = 0.95)
id_num_val_not_corr = c(4,5,20,35)
res.mout <- Moutlier(train[,id_num_val_not_corr], quantile = 0.95)
id_num_val_not_corr = c(4,5,20)
res.mout <- Moutlier(train[,id_num_val_not_corr], quantile = 0.95)
id_num_val_not_corr = c(4,5)
res.mout <- Moutlier(train[,id_num_val_not_corr], quantile = 0.95)
id_num_val_not_corr = c(4,5,20,35,57,67,68,77)
res.mout <- Moutlier(train[,id_num_val_not_corr], quantile = 0.95)
id_num_val_not_corr = c(4,5,20,57,67,68,77)
res.mout <- Moutlier(train[,id_num_val_not_corr], quantile = 0.95)
id_num_val_not_corr = c(4,5,57,67,68,77)
res.mout <- Moutlier(train[,id_num_val_not_corr], quantile = 0.95)
id_num_val_not_corr = c(4,5,57,68,77)
res.mout <- Moutlier(train[,id_num_val_not_corr], quantile = 0.95)
id_num_val_not_corr = c(4,5,20,35)
res.mout <- Moutlier(train[,id_num_val_not_corr], quantile = 0.95)
id_num_val_not_corr = c(4,5,20,35,45,57)
res.mout <- Moutlier(train[,id_num_val_not_corr], quantile = 0.95)
id_num_val_not_corr = c(4,5,20,35,45,57,67,68,77)
res.mout <- Moutlier(train[,id_num_val_not_corr], quantile = 0.95)
id_num_val_not_corr = c(4,5,20,68,77)
res.mout <- Moutlier(train[,id_num_val_not_corr], quantile = 0.95)
id_num_val_not_corr = c(4,5,20,35,45,67,68,77)
res.mout <- Moutlier(train[,id_num_val_not_corr], quantile = 0.95)
id_num_val_not_corr = c(4,5,20,35,45,57,67,68)
res.mout <- Moutlier(train[,id_num_val_not_corr], quantile = 0.95)
id_num_val_not_corr = c(4,5,20,35,45,57,67,77)
res.mout <- Moutlier(train[,id_num_val_not_corr], quantile = 0.95)
id_num_val_not_corr = c(4,5,20,35,45,57,68,77)
res.mout <- Moutlier(train[,id_num_val_not_corr], quantile = 0.95)
id_num_val_not_corr = c(4,5,20,35,45,67,68,77)
res.mout <- Moutlier(train[,id_num_val_not_corr], quantile = 0.95)
id_num_val_not_corr = c(4,5,20,35,57,67,68,77)
res.mout <- Moutlier(train[,id_num_val_not_corr], quantile = 0.95)
id_num_val_not_corr = c(4,5,20,45,57,67,68,77)
res.mout <- Moutlier(train[,id_num_val_not_corr], quantile = 0.95)
id_num_val_not_corr = c(4,5,35,45,57,67,68,77)
res.mout <- Moutlier(train[,id_num_val_not_corr], quantile = 0.95)
id_num_val_not_corr = c(4,20,35,45,57,67,68,77)
res.mout <- Moutlier(train[,id_num_val_not_corr], quantile = 0.95)
id_num_val_not_corr = c(5,20,35,45,57,67,68,77)
res.mout <- Moutlier(train[,id_num_val_not_corr], quantile = 0.95)
id_num_val_not_corr = c(4,5,20,35,45,57,67)
res.mout <- Moutlier(train[,id_num_val_not_corr], quantile = 0.95)
id_num_val_not_corr = c(4,5,20,35,45,68,77)
res.mout <- Moutlier(train[,id_num_val_not_corr], quantile = 0.95)
id_num_val_not_corr = c(4,5,20,57,67,68,77)
res.mout <- Moutlier(train[,id_num_val_not_corr], quantile = 0.95)
id_num_val_not_corr = c(4,5,45,57,67,68,77)
res.mout <- Moutlier(train[,id_num_val_not_corr], quantile = 0.95)
id_num_val_not_corr = c(20,35,45,57,67,68,77)
res.mout <- Moutlier(train[,id_num_val_not_corr], quantile = 0.95)
id_num_val_not_corr = c(4,5,20,57,67,68,77)
res.mout <- Moutlier(train[,id_num_val_not_corr], quantile = 0.95)
id_num_val_not_corr = c(4,5,20,35,45,68,77)
res.mout <- Moutlier(train[,id_num_val_not_corr], quantile = 0.95)
id_num_val_not_corr = c(4,5,20,68,77)
res.mout <- Moutlier(train[,id_num_val_not_corr], quantile = 0.95)
id_num_val_not_corr = c(4,5,20,68,77)
res.mout <- Moutlier(train[,id_num_val_not_corr], quantile = 0.50)
id_num_val_not_corr = c(4,5,20,35,45,57,67,68,77)
res.mout <- Moutlier(train[,id_num_val_not_corr], quantile = 0.30)
x = c(4,5,20,35,45,57,67,68,77)
is.singular.matrix(x, tol = 1e-08)
?is.singular.matrix
??is.singular.matrix
install.packages("matrixcalc")
mymatrix<-matrix(rnorm(4),2,2)
is.singular.matrix(mymatrix)
install.packages("matrixcalc")
mymatrix<-matrix(rnorm(4),2,2)
is.singular.matrix(mymatrix)
install.packages("matrixcalc")
mymatrix<-matrix(rnorm(4),2,2)
#is.singular.matrix(mymatrix)
install.packages("matrixcalc")
mymatrix<-matrix(rnorm(4),2,2)
det(mymatrix)
#is.singular.matrix(mymatrix)
id_num_val_not_corr = c(4,5,20,35,45,57,67,68,77)
#install.packages("matrixcalc")
id_num_val_not_corr = c(4,5,20,35,45,57,67,68,77)
det(train[,id_num_val_not_corr])
#install.packages("matrixcalc")
id_num_val_not_corr = c(4,5,20,35,45,57,67,68,77)
maxtrix = matrix(train[,id_num_val_not_corr])
det()
#install.packages("matrixcalc")
id_num_val_not_corr = c(4,5,20,35,45,57,67,68,77)
maxtrix = matrix(train[,id_num_val_not_corr])
det(maxtrix)
#install.packages("matrixcalc")
id_num_val_not_corr = c(4,5,20,35,45,57,67,68,77)
maxtrix = matrix(train[,id_num_val_not_corr])
#det(maxtrix)
#is.singular.matrix(mymatrix)
matrix()
matrix
ma = matrix(train[,id_num_val_not_corr])
ma
ma[1]
ma[2]
#install.packages("matrixcalc")
id_num_val_not_corr = c(4,5,20,35,45,57,67,68,77)
ma = matrix(train[,id_num_val_not_corr])
det(ma)
#install.packages("matrixcalc")
id_num_val_not_corr = c(4,5,20,35,45,57)
ma = matrix(train[,id_num_val_not_corr])
det(ma)
#install.packages("matrixcalc")
id_num_val_not_corr = c(4,5,20,35)
ma = matrix(train[,id_num_val_not_corr])
det(ma)
id_num_val_not_corr = c(4,5,20,35)
ma = matrix(train[,id_num_val_not_corr])
det(ma)
id_num_val_not_corr = c(4,5,20,35)
ma = matrix(train[,id_num_val_not_corr])
det(ma)
#install.packages("matrixcalc")
id_num_val_not_corr = c(4,5,20,35)
ma = data.matrix(train[,id_num_val_not_corr])
det(ma)
id_num_val_not_corr = c(4,5,20,35)
ma = data.matrix(train[,id_num_val_not_corr])
det(ma)
#install.packages("matrixcalc")
id_num_val_not_corr = c(4,5,20,35)
ma = data.matrix(train[,id_num_val_not_corr])
#is.singular.matrix(mymatrix)
ma
id_num_val_not_corr = c(4,5,20,35,45,57,67,68,77)
res.mout <- Moutlier(train[,id_num_val_not_corr], quantile = 0.95)
id_num_val_not_corr = c(4,5,20,35,45,57,67,68,77)
res.mout <- Moutlier(train[,id_num_val_not_corr], quantile = 0.95)
id_num_val_not_corr = c(4,20,35,45,57,67,68,77)
res.mout <- Moutlier(train[,id_num_val_not_corr], quantile = 0.95)
id_num_val_not_corr = c(20,35,45,57,67,68,77)
res.mout <- Moutlier(train[,id_num_val_not_corr], quantile = 0.95)
id_num_val_not_corr = c(20,35,57,67,68,77)
res.mout <- Moutlier(train[,id_num_val_not_corr], quantile = 0.95)
id_num_val_not_corr = c(20,35,57,68,77)
res.mout <- Moutlier(train[,id_num_val_not_corr], quantile = 0.95)
#install.packages("matrixcalc")
id_num_val_not_corr = c(4,5,20,35,45,57,67,68,77)
ma = data.matrix(train[,id_num_val_not_corr])
#install.packages("matrixcalc")
id_num_val_not_corr = c(4,5,20,35,45,57,67,68,77)
res.mout <- Moutlier(train[,id_num_val_not_corr], quantile = 0.95)
#install.packages("matrixcalc")
id_num_val_not_corr = c(4,5,20,35,57,67,68,77)
res.mout <- Moutlier(train[,id_num_val_not_corr], quantile = 0.95)
#install.packages("matrixcalc")
id_num_val_not_corr = c(4,5,20,35,57,68,77)
res.mout <- Moutlier(train[,id_num_val_not_corr], quantile = 0.95)
#install.packages("matrixcalc")
id_num_val_not_corr = c(4,5,20,35,57,68)
res.mout <- Moutlier(train[,id_num_val_not_corr], quantile = 0.95)
#install.packages("matrixcalc")
id_num_val_not_corr = c(4,5,20,35,57,68,77)
res.mout <- Moutlier(train[,id_num_val_not_corr], quantile = 0.95, plot = FALSE)
res.mout
plot(res.mout$md, res.mout$rd, col="cyan", pch = 19)
res.mout
#install.packages("matrixcalc")
id_num_val_not_corr = c(4,5,20,35,57,68,77)
res.mout <- Moutlier(train[,id_num_val_not_corr], quantile = 0.95, plot = FALSE)
plot(res.mout$rd, col="cyan", pch = 19)
res.mout$cutoff
res.mout$cutoff
id_num_val_not_corr = c(4,5,20,35,57,68,77)
res.mout <- Moutlier(train[,id_num_val_not_corr], quantile = 0.95, plot = FALSE)
plot(res.mout$rd, col="cyan", pch = 19)
res.mout$cutoff
which(res.mout$rd>res.mout$cutoff)
len(a)
length(a)
a=which(res.mout$rd>res.mout$cutoff)
length(a)
abline(y = res.mout$cutoff)
plot(res.mout$rd, col="cyan", pch = 19)
abline(h = res.mout$cutoff)
abline(h = res.mout$cutoff,
col = "red",
lwd = 2,
lty = 2:3))
abline(h = res.mout$cutoff,
col = "red",
lwd = 2)
plot(res.mout$rd, col="cyan", pch = 19)
abline(h = res.mout$cutoff, col = "red", lwd = 2, lty = 2:3)
abline(h = res.mout$cutoff, col = "yellow", lwd = 2, lty = 2:3)
plot(res.mout$rd, col="black", pch = 19)
abline(h = res.mout$cutoff, col = "green", lwd = 2, lty = 2:3)
plot(res.mout$rd, col="blue", pch = 19)
abline(h = res.mout$cutoff, col = "green", lwd = 2, lty = 2:3)
plot(res.mout$rd, col="lightblue", pch = 19)
abline(h = res.mout$cutoff, col = "green", lwd = 2, lty = 2:3)
plot(res.mout$rd, col="lightblue", pch = 19)
abline(h = res.mout$cutoff, col = "green", lwd = 2, lty = 5)
plot(res.mout$rd, col="lightblue", pch = 19)
abline(h = res.mout$cutoff, col = "green", lwd = 5, lty = 5)
plot(res.mout$rd, col="lightblue", pch = 19)
abline(h = res.mout$cutoff, col = "green", lwd = 5, lty = 2)
length(a)
id_num_val
id_num_val_not_corr = c(4,5,20,35,57,68,77)
# The analysis gives that all values from classical Mahalanobis distance
# are NA, as a consequence it is only possible to plot robust Mahalanobis distance
res.mout <- Moutlier(train[,id_num_val_not_corr], quantile = 0.95, plot = FALSE)
plot(res.mout$rd, col="lightblue", pch = 19)
abline(h = res.mout$cutoff, col = "green", lwd = 5, lty = 2)
outliers = which(res.mout$rd>res.mout$cutoff)
length(a)
outliers = which(res.mout$rd>res.mout$cutoff)
length(outliers)
outliers
length(outliers)
par(mfrow = c(1, 1))
# In the multivariate outlier, as this is stochastic, we cannot plot all the features. After several attempts, the best combination is below
id_num_val
id_num_val_not_corr = c(4,5,20,35,57,68,77)
# The analysis gives that all values from classical Mahalanobis distance
# are NA, as a consequence it is only possible to plot robust Mahalanobis distance
# according to the analysis there are 436 outliers (30 % of all data)
res.mout <- Moutlier(train[,id_num_val_not_corr], quantile = 0.95, plot = FALSE)
plot(res.mout$rd, col="lightblue", pch = 19, ylab= 'Observation',
xlab ='Robust Mahalanobis distance ')
abline(h = res.mout$cutoff, col = "green", lwd = 5, lty = 2)
outliers = which(res.mout$rd>res.mout$cutoff)
length(outliers)
# DECIDE WHAT TO DO...
# So we'll remove them from the test data set.
#train_clean = train_num[-ll,]
# In the multivariate outlier, as this is stochastic, we cannot plot all the features. After several attempts, the best combination is below
id_num_val
id_num_val_not_corr = c(4,5,20,35,57,68,77)
# The analysis gives that all values from classical Mahalanobis distance
# are NA, as a consequence it is only possible to plot robust Mahalanobis distance
# according to the analysis there are 436 outliers (30 % of all data)
res.mout <- Moutlier(train[,id_num_val_not_corr], quantile = 0.95, plot = FALSE)
plot(res.mout$rd, col="lightblue", pch = 19, xlab= 'Observation',
ylab ='Robust Mahalanobis distance ')
abline(h = res.mout$cutoff, col = "green", lwd = 5, lty = 2)
outliers = which(res.mout$rd>res.mout$cutoff)
length(outliers)
# DECIDE WHAT TO DO...
# So we'll remove them from the test data set.
#train_clean = train_num[-ll,]
train_clean = train_num[-outliers,]
# In this section we'll Performance PCA to impute the missing data for numerical variables
train_clean = train_num[-outliers,]
res.PCA = imputePCA (train_clean)   # impute numeric variables
str (res.PCA)
str(res.PCA$completeObs)
# We can observe that the missing values are imputed.
train_impute = res.PCA$completeObs; summary(train_impute)
# load DataExplorer library
#use create_report
library(DataExplorer)
create_report(train)
#create_report(test)
# load DataExplorer library
#use create_report
library(DataExplorer)
#create_report(train)
create_report(test)
# load DataExplorer library
#use create_report
library(DataExplorer)
#create_report(train)
create_report(train_impute)
hist(train_num[1])
train_num[1]
hist(train_num[,1])
hist(train_num[,1], probability = FALSE)
hist(train_num[,1], probability = FALSE)
hist(train_num[,1], density = TRUE)
hist(train_num[,1], density = TRUE, probability = F)
hist(train_num[,1], density = TRUE, probability = F)
density(train_num[,1])
library(car)
groups <- factor(sample(c(1, 2), 100, replace = TRUE))
variable <- numeric(100)
# Group 1: mean 3
variable[groups == 1] <- rnorm(length(variable[groups == 1]), 3)
# Group 2: mean 0
variable[groups == 2] <- rnorm(length(variable[groups == 2]))
densityPlot(variable, groups)
library(car)
groups <- factor("imputed", "original")
variable <- numeric(100)
# Group 1: mean 3
variable[groups == 1] <- rnorm(length(variable[groups == 1]), 3)
library(car)
groups <- factor(c("imputed", "original"))
variable <- numeric(100)
# Group 1: mean 3
variable[groups == 1] <- rnorm(length(variable[groups == 1]), 3)
# Group 2: mean 0
variable[groups == 2] <- rnorm(length(variable[groups == 2]))
densityPlot(variable, groups)
density(train_num[,1])
hist(train_num[,1])
hist(train_num[,1],prob = TRUE)
train[,4]
density(train_num[,1])
boxplot(train_num[,1])
boxplot(train_impute[,1])
boxplot(train_num[,1])
boxplot(train_impute[,1])
boxplot(train_num[,1])
boxplot(train_impute[,1])
lenght(train_impute)
par(mfrow=c(1,2))
hist(train_num[,1],prob = TRUE)
hist(train_impute[,1],prob = TRUE)
par(mfrow=c(1,2))
hist(train_num[,1],prob = TRUE, break = 10)
par(mfrow=c(1,2))
hist(train_num[,1],prob = TRUE, breaks = 10)
hist(train_impute[,1],prob = TRUE, breaks = 10)
par(mfrow=c(1,2))
hist(train_num[,1],prob = TRUE, breaks = 20)
hist(train_impute[,1],prob = TRUE, breaks = 20)
hist(train_num[,2],prob = TRUE, breaks = 20)
hist(train_impute[,2],prob = TRUE, breaks = 20)
hist(train_num[,3],prob = TRUE, breaks = 20)
hist(train_impute[,3],prob = TRUE, breaks = 20)
hist(train_num[,4],prob = TRUE, breaks = 20)
hist(train_impute[,4],prob = TRUE, breaks = 20)
hist(train_num[,5],prob = TRUE, breaks = 20)
hist(train_impute[,5],prob = TRUE, breaks = 20)
hist(train_num[,20],prob = TRUE, breaks = 20)
hist(train_impute[,20],prob = TRUE, breaks = 20)
hist(train_num[,20],prob = TRUE, breaks = 10)
hist(train_impute[,20],prob = TRUE, breaks = 10)
hist(train_num[,35],prob = TRUE, breaks = 20)
train_num
train_num[,4]
train_num
train_impute
str(train)
str(train_num)
train_num
names(train_num)
names(train_impute)
names(train_num[20])
names(train_num[35])
names(train_num)
train[,4]
names(train[,4])
names(train[4])
names(train[5])
names(train[20])
names(train[35])
names(train[57])
names(train[68])
names(train[77])
train_impute
hist(train_num$LotFrontage,prob = TRUE, breaks = 20)
hist(train_impute$LotFrontage,prob = TRUE, breaks = 20)
train_impute
# Use condes() method to determine the correlation between categorical feature and the target SalePrice.
res.con = condes(train, 80)
res.con$quanti
res.con$quali
res.con$category
prop.table(train$ScreenPorch)
train$ScreenPorch
barplot(train$ScreenPorch)
plot(train$ScreenPorch)
summary(train$ScreenPorch)
112/(1336+112)
shapiro.test(train_num$LotFrontage)
shapiro.test(train_num$GarageArea)
shapiro.test(train_num$GarageCars)
ks.test(train$SalePrice)
train$SalePrice
ks.test(train$SalePrice, y = 'pnorm')
train$SalePrice
ks.test(train$SalePrice, y = 'pnorm')
ks.test(train$YearBuilt, y = 'pnorm')
ks.test(train$YearBuilt, y = 'pnorm')
ks.test(train$YearBuilt, y = 'pnorm')
ks.test(train$YearBuilt, y = 'pnorm')
shapiro.test(train$YearBuilt)
ks.test(train$GrLivArea, y = 'pnorm')
shapiro.test(train$GrLivArea)
ks.test(train$LotArea, y = 'pnorm')
shapiro.test(train$LotArea)
# Use condes() method to determine the correlation between categorical feature and the target SalePrice.
res.con = condes(train, 80)
# Import the necessary library
library(car)
library(mice)
library(dplyr)
library(missMDA)
library(FactoMineR)
library(chemometrics)
library(DataExplorer)
library(corrplot)
library(con)
library(condes)
library(cond)
library(con)
library(condes)
# Use condes() method to determine the correlation between categorical feature and the target SalePrice.
res.con = condes(train, 80)
res.con$quanti
res.con$quali
res.con$category
