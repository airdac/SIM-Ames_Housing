axis(side=4, pos= 0, labels = F, col="cyan")
text(fdic1,fdic2,labels=levels(varcat), col=c("green", "red"),
cex=0.7)
plot(Psi[,eje1],Psi[,eje2],type="n", xlim= c(-1,1), ylim = c(-1,1), main =
'Target on Factorial plane of PC1 and PC3')
axis(side=1, pos= 0, labels = F, col="cyan")
axis(side=3, pos= 0, labels = F, col="cyan")
axis(side=2, pos= 0, labels = F, col="cyan")
axis(side=4, pos= 0, labels = F, col="cyan")
text(fdic1,fdic2,labels=levels(varcat), col=c("green", "red"),
cex=0.7)
plot(Psi[,eje1],Psi[,eje2],type="n", xlim= c(-1,1), ylim = c(-1,1), xlab = 'Economic stability', ylab = 'PC3', main =
'Target on Factorial plane of PC1 and PC3')
axis(side=1, pos= 0, labels = F, col="cyan")
axis(side=3, pos= 0, labels = F, col="cyan")
axis(side=2, pos= 0, labels = F, col="cyan")
axis(side=4, pos= 0, labels = F, col="cyan")
text(fdic1,fdic2,labels=levels(varcat), col=c("green", "red"),
cex=0.7)
plot(Psi[,eje1],Psi[,eje2],type="n", xlim= c(-1,1), ylim = c(-1,1), xlab = 'Economic stability', ylab = 'PC3', main =
'Target on Factorial plane of PC1 and PC3')
axis(side=1, pos= 0, labels = F, col="cyan")
axis(side=3, pos= 0, labels = F, col="cyan")
axis(side=2, pos= 0, labels = F, col="cyan")
axis(side=4, pos= 0, labels = F, col="cyan")
text(fdic1,fdic2,labels=levels(varcat), col=c("green", "red"),
cex=0.7)
dcat <- c(2:5,11:14,17:18,20)
colors<-rainbow(length(dcat))
plot(Psi[,eje1],Psi[,eje2], type = "n", xlim = c(-1.5,1.5), ylim = c(-.7,.7), xlab = 'Economic stability', ylab = 'PC3', main =
'Modalities on Factorial plane of PC1 and PC3')
axis(side=1, pos= 0, labels = F, col="cyan")
axis(side=3, pos= 0, labels = F, col="cyan")
axis(side=2, pos= 0, labels = F, col="cyan")
axis(side=4, pos= 0, labels = F, col="cyan")
# Loop to add all categories
c <- 1
for(k in dcat){
seguentColor<-colors[c]
fdic1 = tapply(Psi[,eje1],data[,k],mean)
fdic2 = tapply(Psi[,eje2],data[,k],mean)
text(fdic1,fdic2,labels=levels(factor(data[,k])),col=seguentColor, cex=0.6)
c<-c+1
}
legend("bottomleft",names(data)[dcat],pch=1,col=colors, cex=0.6)
dcat <- c(2:5,11:14,17:18,20)
colors<-rainbow(length(dcat))
plot(Psi[,eje1],Psi[,eje2], type = "n", xlim = c(-1.5,1.5), ylim = c(-.7,.7), xlab = 'Economic stability', ylab = 'PC3', main =
'Modalities on Factorial plane of PC1 and PC3')
axis(side=1, pos= 0, labels = F, col="cyan")
axis(side=3, pos= 0, labels = F, col="cyan")
axis(side=2, pos= 0, labels = F, col="cyan")
axis(side=4, pos= 0, labels = F, col="cyan")
# Loop to add all categories
c <- 1
for(k in dcat){
seguentColor<-colors[c]
fdic1 = tapply(Psi[,eje1],data[,k],mean)
fdic2 = tapply(Psi[,eje2],data[,k],mean)
text(fdic1,fdic2,labels=levels(factor(data[,k])),col=seguentColor, cex=0.6)
c<-c+1
}
legend("bottomleft",names(data)[dcat],pch=1,col=colors, cex=0.6)
#Select the component to be plot on our axis
eje1<-2
eje2<-3
# Here is were we create the shadows
plot(Psi[,eje1],Psi[,eje2], type="n")
text(Psi[,eje1],Psi[,eje2],labels=iden, cex=0.5)
axis(side=1, pos= 0, labels = F, col="cyan")
axis(side=3, pos= 0, labels = F, col="cyan")
axis(side=2, pos= 0, labels = F, col="cyan")
axis(side=4, pos= 0, labels = F, col="cyan")
# Projection of variables
# Correlation between original variables and the principal components
Phi = cor(dcon,Psi)
#select our axes
X<-Phi[,eje1]
Y<-Phi[,eje2]
plot(Psi[,eje1],Psi[,eje2],type="n")
axis(side=1, pos= 0, labels = F)
axis(side=3, pos= 0, labels = F)
axis(side=2, pos= 0, labels = F)
axis(side=4, pos= 0, labels = F)
arrows(ze, ze, X, Y, length = 0.07,col="blue")
text(X,Y,labels=etiq,col="darkblue", cex=0.7)
plot(Psi[,eje1],Psi[,eje2],type="n", xlim = c(-1,1), ylim = c(-0.2, 1),
main = '', xlab = '# Family members', ylab='PC3', main = "Numerical
Variables on Factorial plane of PC2 and PC3")
plot(Psi[,eje1],Psi[,eje2],type="n", xlim = c(-1,1), ylim = c(-0.2, 1), xlab = '# Family members', ylab='PC3', main = "Numerical
Variables on Factorial plane of PC2 and PC3")
axis(side=1, pos= 0, labels = F)
axis(side=3, pos= 0, labels = F)
axis(side=2, pos= 0, labels = F)
axis(side=4, pos= 0, labels = F)
arrows(ze, ze, X, Y, length = 0.07,col="blue")
text(X,Y,labels=etiq,col="darkblue", cex=0.8)
text(-0.65,-0.7,
substitute(paste(italic('Note: "price" and "credit" share almost the same space')))
,col="red", cex=0.8)
# "price" and "credit" overlap because one is the price of the good to purchase, while credit is the loan the client requests.
# Adding the target variable (index=2)
varcat<-factor(data[,2])
fdic1 = tapply(Psi[,eje1],varcat,mean)
fdic2 = tapply(Psi[,eje2],varcat,mean)
varcat=factor(data[,2])
plot(Psi[,eje1],Psi[,eje2], pch=c(20,20) [varcat], col=c("darkblue", "red") [varcat], xlab = '# Family members', ylab='PC3', main = "Individuals
on Factorial plane of PC2 and PC3")
axis(side=1, pos= 0, labels = F, col="black")
axis(side=3, pos= 0, labels = F, col="black")
axis(side=2, pos= 0, labels = F, col="black")
axis(side=4, pos= 0, labels = F, col="black")
legend("bottomleft",levels(factor(varcat)),pch=c(20,20),col=c("darkblue", "red"), cex=0.6)
text(fdic1,fdic2,labels=levels(varcat), col=c("green", "green"),
cex=0.7)
plot(Psi[,eje1],Psi[,eje2],type="n", xlim= c(-1,1), ylim = c(-1,1))
axis(side=1, pos= 0, labels = F, col="cyan")
axis(side=3, pos= 0, labels = F, col="cyan")
axis(side=2, pos= 0, labels = F, col="cyan")
axis(side=4, pos= 0, labels = F, col="cyan")
text(fdic1,fdic2,labels=levels(varcat), col=c("green", "red"), cex=0.7)
plot(Psi[,eje1],Psi[,eje2],type="n", xlim= c(-1,1), ylim = c(-1,1), xlab = '# Family members', ylab='PC3', main = "Individuals
on Factorial plane of PC2 and PC3")
axis(side=1, pos= 0, labels = F, col="cyan")
axis(side=3, pos= 0, labels = F, col="cyan")
axis(side=2, pos= 0, labels = F, col="cyan")
axis(side=4, pos= 0, labels = F, col="cyan")
text(fdic1,fdic2,labels=levels(varcat), col=c("green", "red"), cex=0.7)
plot(Psi[,eje1],Psi[,eje2],type="n", xlim= c(-1,1), ylim = c(-1,1), xlab = '# Family members', ylab='PC3', main = "Individuals
on Factorial plane of PC2 and PC3")
axis(side=1, pos= 0, labels = F, col="cyan")
axis(side=3, pos= 0, labels = F, col="cyan")
axis(side=2, pos= 0, labels = F, col="cyan")
axis(side=4, pos= 0, labels = F, col="cyan")
text(fdic1,fdic2,labels=levels(varcat), col=c("green", "red"), cex=0.7)
plot(Psi[,eje1],Psi[,eje2],type="n", xlim= c(-1,1), ylim = c(-1,1), xlab = '# Family members', ylab='PC3', main = "Target
on Factorial plane of PC2 and PC3")
axis(side=1, pos= 0, labels = F, col="cyan")
axis(side=3, pos= 0, labels = F, col="cyan")
axis(side=2, pos= 0, labels = F, col="cyan")
axis(side=4, pos= 0, labels = F, col="cyan")
text(fdic1,fdic2,labels=levels(varcat), col=c("green", "red"), cex=0.7)
dcat <- c(2:5,11:14,17:18,20)
colors<-rainbow(length(dcat))
plot(Psi[,eje1],Psi[,eje2], type = "n")
axis(side=1, pos= 0, labels = F, col="cyan")
axis(side=3, pos= 0, labels = F, col="cyan")
axis(side=2, pos= 0, labels = F, col="cyan")
axis(side=4, pos= 0, labels = F, col="cyan")
# Loop to add all categories
c <- 1
for(k in dcat){
seguentColor<-colors[c]
fdic1 = tapply(Psi[,eje1],data[,k],mean)
fdic2 = tapply(Psi[,eje2],data[,k],mean)
text(fdic1,fdic2,labels=levels(factor(data[,k])),col=seguentColor, cex=0.6)
c<-c+1
}
legend("bottomleft",names(data)[dcat],pch=1,col=colors, cex=0.6)
plot(Psi[,eje1],Psi[,eje2], type = "n", xlim = c(-2.5,2), ylim = c(-.7,.7),
xlab = "# Family members", ylab = "PC3")
axis(side=1, pos= 0, labels = F, col="cyan")
axis(side=3, pos= 0, labels = F, col="cyan")
axis(side=2, pos= 0, labels = F, col="cyan")
axis(side=4, pos= 0, labels = F, col="cyan")
# Loop to add all categories
c <- 1
for(k in dcat){
seguentColor<-colors[c]
fdic1 = tapply(Psi[,eje1],data[,k],mean)
fdic2 = tapply(Psi[,eje2],data[,k],mean)
text(fdic1,fdic2,labels=levels(factor(data[,k])),col=seguentColor, cex=0.6)
c<-c+1
}
legend("bottomleft",names(data)[dcat],pch=1,col=colors, cex=0.6)
plot(Psi[,eje1],Psi[,eje2], type = "n", xlim = c(-2.5,2), ylim = c(-.7,.7),
xlab = "# Family members", ylab = "PC3", main =
"Modalities on Factorial plane of PC2 and PC3")
axis(side=1, pos= 0, labels = F, col="cyan")
axis(side=3, pos= 0, labels = F, col="cyan")
axis(side=2, pos= 0, labels = F, col="cyan")
axis(side=4, pos= 0, labels = F, col="cyan")
# Loop to add all categories
c <- 1
for(k in dcat){
seguentColor<-colors[c]
fdic1 = tapply(Psi[,eje1],data[,k],mean)
fdic2 = tapply(Psi[,eje2],data[,k],mean)
text(fdic1,fdic2,labels=levels(factor(data[,k])),col=seguentColor, cex=0.6)
c<-c+1
}
legend("bottomleft",names(data)[dcat],pch=1,col=colors, cex=0.6)
plot(Psi[,eje1],Psi[,eje2], type = "n", xlim = c(-2.5,2), ylim = c(-.7,.7),
xlab = "# Family members", ylab = "PC3", main =
"Modalities on Factorial plane of PC2 and PC3")
axis(side=1, pos= 0, labels = F, col="cyan")
axis(side=3, pos= 0, labels = F, col="cyan")
axis(side=2, pos= 0, labels = F, col="cyan")
axis(side=4, pos= 0, labels = F, col="cyan")
# Loop to add all categories
c <- 1
for(k in dcat){
seguentColor<-colors[c]
fdic1 = tapply(Psi[,eje1],data[,k],mean)
fdic2 = tapply(Psi[,eje2],data[,k],mean)
text(fdic1,fdic2,labels=levels(factor(data[,k])),col=seguentColor, cex=0.6)
c<-c+1
}
legend("bottomleft",names(data)[dcat],pch=1,col=colors, cex=0.6)
# Select only 4 components
nd = 4
Psi = pc1$x[,1:nd]
# STORAGE OF LABELS FOR INDIVIDUALS AND VARIABLES
iden = row.names(dcon)
etiq = names(dcon)
ze = rep(0,length(etiq)) # WE WILL NEED THIS VECTOR AFTERWARDS FOR THE GRAPHICS
# PLOT OF INDIVIDUALS
#Select the component to be plot on our axis
eje1<-1
eje2<-2
# Here is were we create the shadows
plot(Psi[,eje1],Psi[,eje2], type="n")
text(Psi[,eje1],Psi[,eje2],labels=iden, cex=0.5)
axis(side=1, pos= 0, labels = F, col="cyan")
axis(side=3, pos= 0, labels = F, col="cyan")
axis(side=2, pos= 0, labels = F, col="cyan")
axis(side=4, pos= 0, labels = F, col="cyan")
# Projection of variables
# Correlation between original variables and the principal components
Phi = cor(dcon,Psi)
#select our axes
X<-Phi[,eje1]
Y<-Phi[,eje2]
plot(Psi[,eje1],Psi[,eje2],type="n")
axis(side=1, pos= 0, labels = F)
axis(side=3, pos= 0, labels = F)
axis(side=2, pos= 0, labels = F)
axis(side=4, pos= 0, labels = F)
arrows(ze, ze, X, Y, length = 0.07,col="blue")
text(X,Y,labels=etiq,col="darkblue", cex=0.7)
plot(Psi[,eje1],Psi[,eje2],type="n", xlim = c(0.94,0.96), ylim = c(0.02, 0.05),
xlab = "Economic stability", ylab='# Family members', main =
"Numerical Variables on Factorial plane of PC1 and PC2")
axis(side=1, pos= 0, labels = F)
axis(side=3, pos= 0, labels = F)
axis(side=2, pos= 0, labels = F)
axis(side=4, pos= 0, labels = F)
arrows(ze, ze, X, Y, length = 0.07,col="blue")
text(X,Y,labels=etiq,col="darkblue", cex=0.7)
plot(Psi[,eje1],Psi[,eje2],type="n", xlim = c(0.94,0.96), ylim = c(0.02, 0.05),
xlab = "Economic stability", ylab='# Family members', main =
"Price and credit on Factorial plane of PC1 and PC2")
axis(side=1, pos= 0, labels = F)
axis(side=3, pos= 0, labels = F)
axis(side=2, pos= 0, labels = F)
axis(side=4, pos= 0, labels = F)
arrows(ze, ze, X, Y, length = 0.07,col="blue")
text(X,Y,labels=etiq,col="darkblue", cex=0.7)
100*(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2]
barplot(100*(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2], main =
'Inertia of principal components',
names.arg = c("PC1", "PC2", "PC3", "PC4", "PC5",
"PC6", "PC7", "PC8"), ylab = "Inertia (%)")
axis(side=2, at=(seq(0, 100, by=10)), labels = FALSE)
barplot_x <- barplot(100*(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2], main =
'Inertia of principal components',
names.arg = c("PC1", "PC2", "PC3", "PC4", "PC5",
"PC6", "PC7", "PC8"), ylab = "Inertia (%)")
axis(side=2, at=(seq(0, 100, by=10)), labels = FALSE)
barplot_y <- as.matrix(100*(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2])
text(x,y+2,labels=as.character(y))
barplot_x <- barplot(100*(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2], main =
'Inertia of principal components',
names.arg = c("PC1", "PC2", "PC3", "PC4", "PC5",
"PC6", "PC7", "PC8"), ylab = "Inertia (%)")
axis(side=2, at=(seq(0, 100, by=10)), labels = FALSE)
barplot_y <- as.matrix(100*(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2])
text(barplot_x,barplot_y+2,labels=as.character(y))
barplot_x <- barplot(100*(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2], main =
'Inertia of principal components',
names.arg = c("PC1", "PC2", "PC3", "PC4", "PC5",
"PC6", "PC7", "PC8"), ylab = "Inertia (%)")
axis(side=2, at=(seq(0, 100, by=10)), labels = FALSE)
barplot_y <- as.matrix(100*(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2])
text(barplot_x,barplot_y+2,labels=as.character(barplot_y))
barplot_x <- barplot(100*(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2], main =
'Inertia of principal components',
names.arg = c("PC1", "PC2", "PC3", "PC4", "PC5",
"PC6", "PC7", "PC8"), ylab = "Inertia (%)")
axis(side=2, at=(seq(0, 100, by=10)), labels = FALSE)
barplot_y <- round(as.matrix(100*(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2]), digits = 1)
text(barplot_x,barplot_y+2,labels=as.character(barplot_y))
barplot_x <- barplot(100*(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2], main =
'Inertia of principal components',
names.arg = c("PC1", "PC2", "PC3", "PC4", "PC5",
"PC6", "PC7", "PC8"), ylab = "Inertia (%)", ylim = 40)
barplot_x <- barplot(100*(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2], main =
'Inertia of principal components',
names.arg = c("PC1", "PC2", "PC3", "PC4", "PC5",
"PC6", "PC7", "PC8"), ylab = "Inertia (%)", ylim = (0,40)
barplot_x <- barplot(100*(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2], main =
'Inertia of principal components',
names.arg = c("PC1", "PC2", "PC3", "PC4", "PC5",
"PC6", "PC7", "PC8"), ylab = "Inertia (%)", ylim = c(0,40))
axis(side=2, at=(seq(0, 100, by=10)), labels = FALSE)
barplot_y <- round(as.matrix(100*(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2]), digits = 1)
text(barplot_x,barplot_y+2,labels=as.character(barplot_y))
barplot_x <- barplot(100*cumsum(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2], main =
'Inertia of principal components',
names.arg = c("PC1", "PC2", "PC3", "PC4", "PC5",
"PC6", "PC7", "PC8"), ylab = "Inertia (%)", ylim = c(0,40))
axis(side=2, at=(seq(0, 100, by=10)), labels = FALSE)
barplot_y <- round(as.matrix(100*(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2]), digits = 1)
text(barplot_x,barplot_y+2,labels=as.character(barplot_y))
barplot_x <- barplot(100*cumsum(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2], main =
'Inertia of principal components',
names.arg = c("PC1", "PC2", "PC3", "PC4", "PC5",
"PC6", "PC7", "PC8"), ylab = "Inertia (%)", ylim = c(0,105))
axis(side=2, at=(seq(0, 100, by=10)), labels = FALSE)
barplot_y <- round(as.matrix(100*(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2]), digits = 1)
text(barplot_x,barplot_y+2,labels=as.character(barplot_y))
barplot_x <- barplot(100*cumsum(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2], main =
'Inertia of principal components',
names.arg = c("PC1", "PC2", "PC3", "PC4", "PC5",
"PC6", "PC7", "PC8"), ylab = "Inertia (%)", ylim = c(0,105))
axis(side=2, at=(seq(0, 100, by=10)), labels = FALSE)
barplot_y <- round(as.matrix(100*(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2]), digits = 1)
text(barplot_x,barplot_y+2,labels=as.character(barplot_y))
barplot_y <- round(as.matrix(100*(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2]), digits = 1)
barplot_x <- barplot(100*cumsum(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2], main =
'Inertia of principal components',
names.arg = c("PC1", "PC2", "PC3", "PC4", "PC5",
"PC6", "PC7", "PC8"), ylab = "Inertia (%)", ylim = c(0,105))
axis(side=2, at=(seq(0, 100, by=10)), labels = FALSE)
barplot_y <- round(as.matrix(100*(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2]), digits = 1)
text(barplot_x,barplot_y+2,labels=as.character(barplot_y))
barplot_x <- barplot(100*cumsum(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2], main =
'Inertia of principal components',
names.arg = c("PC1", "PC2", "PC3", "PC4", "PC5",
"PC6", "PC7", "PC8"), ylab = "Inertia (%)", ylim = c(0,105))
axis(side=2, at=(seq(0, 100, by=10)), labels = FALSE)
barplot_y <- round(as.matrix(100*(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2]), digits = 1)
text(barplot_x,barplot_y+2,labels=as.character(barplot_y))
barplot_x <- NULL
barplot_y <- NULL
barplot_x <- barplot(100*cumsum(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2], main =
'Inertia of principal components',
names.arg = c("PC1", "PC2", "PC3", "PC4", "PC5",
"PC6", "PC7", "PC8"), ylab = "Inertia (%)", ylim = c(0,105))
axis(side=2, at=(seq(0, 100, by=10)), labels = FALSE)
barplot_y <- round(as.matrix(100*(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2]), digits = 1)
text(barplot_x,barplot_y+2,labels=as.character(barplot_y))
barplot_x <- barplot(100*cumsum(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2], main =
'Inertia of principal components',
names.arg = c("PC1", "PC2", "PC3", "PC4", "PC5",
"PC6", "PC7", "PC8"), ylab = "Inertia (%)", ylim = c(0,105))
axis(side=2, at=(seq(0, 100, by=10)), labels = FALSE)
barplot_y <- round(as.matrix(100*cumsum(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2]), digits = 1)
text(barplot_x,barplot_y+2,labels=as.character(barplot_y))
barplot_x <- barplot(100*cumsum(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2], main =
'Inertia of principal components',
names.arg = c("PC1", "PC2", "PC3", "PC4", "PC5",
"PC6", "PC7", "PC8"), ylab = "Inertia (%)", ylim = c(0,105))
axis(side=2, at=(seq(0, 100, by=10)), labels = FALSE)
barplot_y <- round(as.matrix(100*cumsum(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2]), digits = 1)
text(barplot_x,barplot_y+5,labels=as.character(barplot_y))
barplot_x <- barplot(100*cumsum(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2], main =
'Inertia of principal components',
names.arg = c("PC1", "PC2", "PC3", "PC4", "PC5",
"PC6", "PC7", "PC8"), ylab = "Inertia (%)", ylim = c(0,110))
barplot_x <- barplot(100*cumsum(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2], main =
'Inertia of principal components',
names.arg = c("PC1", "PC2", "PC3", "PC4", "PC5",
"PC6", "PC7", "PC8"), ylab = "Inertia (%)", ylim = c(0,110))
axis(side=2, at=(seq(0, 100, by=10)), labels = FALSE)
barplot_y <- round(as.matrix(100*cumsum(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2]), digits = 1)
text(barplot_x,barplot_y+5,labels=as.character(barplot_y))
barplot_x <- barplot(100*cumsum(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2], main =
'Accumulated inertia of principal components',
names.arg = c("PC1", "PC2", "PC3", "PC4", "PC5",
"PC6", "PC7", "PC8"), ylab = "Inertia (%)", ylim = c(0,110))
axis(side=2, at=(seq(0, 100, by=10)), labels = FALSE)
barplot_y <- round(as.matrix(100*cumsum(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2]), digits = 1)
text(barplot_x,barplot_y+5,labels=as.character(barplot_y))
```{r}
barplot_x <- barplot(100*cumsum(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2], main =
'Accumulated inertia of principal components',
names.arg = c("PC1", "PC2", "PC3", "PC4", "PC5",
"PC6", "PC7", "PC8"), ylab = "Inertia (%)", ylim = c(0,110))
axis(side=2, at=(seq(0, 100, by=10)), labels = FALSE)
barplot_y <- round(as.matrix(100*cumsum(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2]), digits = 1)
text(barplot_x,barplot_y+5,labels=as.character(barplot_y))
abline(80,0, col = "blue", lwd = 2, lty = 2)
barplot_x <- barplot(100*cumsum(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2], main =
'Accumulated inertia of principal components',
names.arg = c("PC1", "PC2", "PC3", "PC4", "PC5",
"PC6", "PC7", "PC8"), ylab = "Accumulated inertia (%)", ylim = c(0,110))
axis(side=2, at=(seq(0, 100, by=10)), labels = FALSE)
barplot_y <- round(as.matrix(100*cumsum(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2]), digits = 1)
text(barplot_x,barplot_y+5,labels=as.character(barplot_y))
abline(80,0, col = "blue", lwd = 2, lty = 2)
install.packages(c("htmlTable", "knitr", "RcppArmadillo", "sampling", "withr"))
x <- seq(0, 10)
x
x2 <- seq(1,10, 0.5)
x2
t(x)
t(t(x))
ls()
aggregate(x, by=ls(seq(1,10,2)), FUN="mean")
ls(x)
aggregate(x, by=ls(), FUN="mean")
aggregate(x, by=seq(1,10,2), FUN="mean")
aggregate(x, by=c(1,2), FUN="mean")
data(karate, package="igraphdata")
install.packages(igraphdata)
install.packages("igraphdata")
data(karate, package="igraphdata")
wc <- walktrap.community(karate)
install.packages("clustAnalytics")
library(clustAnalytics)
wc <- walktrap.community(karate)
mod <- modularity(wc)
mod
setwd("C:/Users/Airdac/Documents/GitHub/SIM-Project")
# Chunk 1
# Clean workspace
if(!is.null(dev.list())) dev.off()
rm(list = ls())
# Chunk 2
# Load libraries
library(car)
library(mice)
library(dplyr)
library(missMDA)
library(FactoMineR)
library(chemometrics)
library(DataExplorer)
library(corrplot)
library(MASS)
library(effects)
# Chunk 3
# Load data
df = read.csv("train_impute.csv")
# Declare factors
df$OverallQual <- as.factor(df$OverallQual)
df$MSSubClass <- as.factor(df$MSSubClass)
char_var <- which(sapply(df, is.character))
df[,char_var] <- lapply(df[, char_var], as.factor)
# Chunk 4
df_num <- df[, which(sapply(df, is.numeric))]
m0 = lm(SalePrice ~ ., data=df_num)
summary(m0)
vif(m0)
# The X1stFlrSF, X2ndFlrSF, GrLivArea, has a vif correlation bigger than 10, indicating that we'll need to do some kind of transformation or simply remove it.
# Chunk 5
# Let's store the indices of the variables with at least one star in the lm and vif<5
id_num_star1 = c(1:5,15,17,21:23)
df_num1 <- df_num[, id_num_star1]
m1 = lm(SalePrice ~., data=df_num1)
summary(m1)
vif(m1)
corr_mat <- cor(df_num1)
corrplot(corr_mat)
cor.test(df_num1$YearBuilt, df_num1$YearRemodAdd)
corr_mat
# Chunk 6
id_num_star2 = c(1:3,5,15,17,21:23)
df_num2 <- df_num[, id_num_star2]
m2 = lm(SalePrice ~., data=df_num2)
summary(m2)
vif(m2)
corr_mat <- cor(df_num2)
corrplot(corr_mat)
corr_mat
# Chunk 7
Anova(m2)
# Chunk 8
plot(m2)
D_thresh <- 2/sqrt(dim(df_num2)[1]); D_thresh
# Chunk 10
step(m2)
# Chunk 11
#residualPlots(m2)
#avPlots(m2)
#crPlot(m2)
# Chunk 12
boxcox(m2)
# We should apply log(x) to SalePrice
m3 = lm(log(SalePrice)~., data=df_num2)
summary(m3)
# Chunk 13
par(mfrow=c(2,2))
plot(m3, id.n=5)
# Chunk 14
#boxTidwell(SalePrice ~ ., data=df_num2)   THIS GIVES ERROR because most variables have null values
# We'll assign 10^(-6) to all cells equal to 0 to be able to use boxTidwell without alterating too much the model
df_num2 = replace(df_num2, df_num2 == 0, 1e-6)
summary(df_num2)
# boxTidwell(log(SalePrice)~., data=df_num2) THIS GIVES ERROR AS WELL because the model has too many variables
boxTidwell(log(SalePrice) ~ LotArea+YearBuilt+MasVnrArea, data = df_num2)
# We should apply sqrt(LotArea). The lambda for YearBuilt is too large, so it would difficult to interpet the model using it. MasVnrArea has a too large p-value, so we cannot reject the null hypothesis that lambda = 1.
boxTidwell(log(SalePrice)~LotFrontage, data = df_num2)
# Too small lambda
boxTidwell(log(SalePrice)~BedroomAbvGr, data = df_num2)
# Too large p-value
boxTidwell(log(SalePrice)~Fireplaces, data =df_num2)
# We apply log() to Fireplaces
boxTidwell(log(SalePrice)~WoodDeckSF, data = df_num2)
# We apply sqrt() to WoodDeckSF
boxTidwell(log(SalePrice)~OpenPorchSF, data = df_num2)
# Too small lambda
