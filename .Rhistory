<<<<<<< Updated upstream
setwd("C:/Users/Airdac/Documents/GitHub/SIM-Project")
=======
# Import the necesary library
library(dplyr)
# Import the necesary library
library(dplyr)
library(car)
library(missMDA)
# Import the necesary library
library(dplyr)
library(car)
library(missMDA)
# With the summary, we can see that there is 80 variables in total.
summary(test)
# Load the data
if(!is.null(dev.list())) dev.off()
rm(list = ls())
test = read.csv("test.csv")
# With the summary, we can see that there is 80 variables in total.
summary(test)
# Load the data
if(!is.null(dev.list())) dev.off()
rm(list = ls())
test = read.csv("test.csv")
setwd("~/GitHub/SIM-Project")
>>>>>>> Stashed changes
# Load the data
if(!is.null(dev.list())) dev.off()
rm(list = ls())
test = read.csv("test.csv")
train = read.csv("train.csv")
<<<<<<< Updated upstream
table(test$BsmtFullBath)
table(test$FullBath)
table(test$HalfBath)
table(test$BsmtHalfBath)
table(test$YearBuilt)
table(test$YearRemodAdd)
table(test$BsmtFinType2)
table(test$LowQualFinSF)
# Load the data
if(!is.null(dev.list())) dev.off()
rm(list = ls())
test = read.csv("test.csv")
train = read.csv("train.csv")
# Import necessary libraries
library(car)
library(missMDA)
# With the summary, we can see that there are 80 variables in total.
=======
# Import the necesary library
library(dplyr)
library(car)
library(missMDA)
# With the summary, we can see that there is 80 variables in total.
>>>>>>> Stashed changes
summary(test)
# And the name of each feature are below.
str(test)
# Analyzing all the feature will be an exhausting work. So there should be some way to reduce the dimensionality. According to the statement of this project, we should retain all the numerical variable and 10 categorical variable.
# The categorical variable are below
Categorical_val = c('MSSubClass',"MSZoning","Street","Alley","LotShape","LandContour","Utilities","LotConfig","LandSlope","Neighborhood","Condition1","Condition2","BldgType","HouseStyle","OverallQual","OverallCond","RoofStyle","RoofMatl","Exterior1st","Exterior2nd","MasVnrType","ExterQual","ExterCond","Foundation","BsmtQual","BsmtCond","BsmtExposure","BsmtFinType1","BsmtFinType2","Heating","HeatingQC","CentralAir","Electrical","KitchenQual","Functional","FireplaceQu","GarageType","GarageFinish","GarageQual","GarageCond","PavedDrive","PoolQC","Fence","MiscFeature","SaleType","SaleCondition")
# The numerical variable are
Numerical_val = c("LotFrontage","LotArea","MasVnrArea","BsmtFinSF1","BsmtFinSF2","BsmtUnfSF","TotalBsmtSF","1stFlrSF","2ndFlrSF","LowQualFinSF","GrLivArea","BsmtFullBath","BsmtHalfBath","FullBath","HalfBath","Bedroom","Kitchen","TotRmsAbvGrd","Fireplaces","GarageCars","GarageArea","WoodDeckSF","OpenPorchSF","EnclosedPorch","X3SsnPorch","ScreenPorch","PoolArea","MiscVal")
# And the date variable are
Date_val = c("YearBuilt","YearRemodAdd","GarageYrBlt","MoSold","YrSold")
<<<<<<< Updated upstream
summary(test)
test$EnclosedPorch
par(mfrow=c(1,3))
hist(test$OpenPorchSF)
hist(test$ScreenPorch)
hist(test$X3SsnPorch)
par(mfrow=c(1,1))
par(mfrow=c(1,3))
hist(test$OpenPorchSF)
hist(test$ScreenPorch)
hist(test$X3SsnPorch)
par(mfrow=c(1,1))
str(test)
train$SalePrice
str(train)
len(train)
lenght(train)
length(train)
train[,80]
train[,81]
train[,82]
train[,81]
names(train)
res.cat=catdes(train, 81)
# Import necessary libraries
library(car)
library(missMDA)
library(FactoMineR)
names(train)
res.cat=catdes(train, 81)
summary(train)
condes(train, 81)  # df = columns without missings
res.con = condes(train, 81)         #To classify
res.con$quanti
res.con$quali
res.con$category
# load the DataExplorer library
library(DataExplorer)
# use create_report
create_report(train)
create_report(test)
create_report(train)
condes(train, 81)  # df = columns without missings
res.con = condes(train, 81)         #To classify
res.con$quanti
res.con$quali
res.con$category
str(test)
str(train)
test$Id
train$Id
condes(train, 81)  # df = columns without missings
res.con = condes(train, 81)         #To classify
res.con$quanti
res.con$quali
res.con$category
str(train)
str(train)
res.cat=catdes(df, 13) # df = columns without missings
res.cat=catdes(train, 13) # df = columns without missings
res.cat$test.chi2
res.cat$category
res.cat$quanti.var; res.cat$quanti
res.cat=catdes(train, 13) # df = columns without missings
res.cat$test.chi2
res.cat$category
res.cat$quanti.var; res.cat$quanti
res.cat=catdes(train, 13) # df = columns without missings
res.cat$test.chi2
#res.cat$category
#res.cat$quanti.var; res.cat$quanti
res.cat=catdes(train, 13) # df = columns without missings
#res.cat$test.chi2
res.cat$category
#res.cat$quanti.var; res.cat$quanti
=======
select(test, Numerical_val)
test$BedroomAbvGr
Numerical_val = c("LotFrontage","LotArea","MasVnrArea","BsmtFinSF1","BsmtFinSF2","BsmtUnfSF","TotalBsmtSF","X1stFlrSF","X2ndFlrSF","LowQualFinSF","GrLivArea","BsmtFullBath","BsmtHalfBath","FullBath","HalfBath","BedroomAbvGr","KitchenAbvGr","TotRmsAbvGrd","Fireplaces","GarageCars","GarageArea","WoodDeckSF","OpenPorchSF","EnclosedPorch","X3SsnPorch","ScreenPorch","PoolArea","MiscVal")
select(test, Numerical_val)
select(test, Categorical_val)
select(test, date_val)
select(test, Date_val)
select(test, Categorical_val)
select(test, "YearBuilt")
select(test, "YearRemodAdd")
select(test, "GarageYrBlt")
select(test, "MoSold")
select(test, "YrSold")
select(test, Date_val)
select(test, Date_val)
select(test, Categorical_val)
select(test, Numerical_val)
6/1459
6/1459*100
test_num = select(test, Numerical_val)
test_num
summary(test_num)
test_num = select(test, Numerical_val); test_num
test_num = select(test, Numerical_val); summary(test_num)
summary(test_num$BsmtFinSF1)
summary(test_num$BsmtFinSF2)
test_num$BsmtFinSF2
test_num$BsmtFinSF1
plot(test_num$BsmtFinSF1, test_num$BsmtFinSF2)
test$BsmtFullBath
unique(test$BsmtFullBath)
unique(test$BsmtHalfBath)
unique(test$FullBath )
unique(test$HalfBath)
unique(test$BedroomAbvGr)
unique(test$KitchenAbvGr)
sapply(test, unique)
# Below numerical variable can also convert into categorical
sapply(select(test, Numerical_val), unique)
# Below numerical variable can also convert into categorical
sapply(select(test, Numerical_val), unique)
count(test$PoolArea)
>>>>>>> Stashed changes
