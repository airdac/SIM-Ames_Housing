fdic2 = tapply(Psi[,eje2],data[,k],mean)
text(fdic1,fdic2,labels=levels(factor(data[,k])),col=seguentColor, cex=0.6)
c<-c+1
}
legend("bottomleft",names(data)[dcat],pch=1,col=colors, cex=0.6)
# Select only 4 components
nd = 4
Psi = pc1$x[,1:nd]
# STORAGE OF LABELS FOR INDIVIDUALS AND VARIABLES
iden = row.names(dcon)
etiq = names(dcon)
ze = rep(0,length(etiq)) # WE WILL NEED THIS VECTOR AFTERWARDS FOR THE GRAPHICS
# PLOT OF INDIVIDUALS
#Select the component to be plot on our axis
eje1<-1
eje2<-2
# Here is were we create the shadows
plot(Psi[,eje1],Psi[,eje2], type="n")
text(Psi[,eje1],Psi[,eje2],labels=iden, cex=0.5)
axis(side=1, pos= 0, labels = F, col="cyan")
axis(side=3, pos= 0, labels = F, col="cyan")
axis(side=2, pos= 0, labels = F, col="cyan")
axis(side=4, pos= 0, labels = F, col="cyan")
# Projection of variables
# Correlation between original variables and the principal components
Phi = cor(dcon,Psi)
#select our axes
X<-Phi[,eje1]
Y<-Phi[,eje2]
plot(Psi[,eje1],Psi[,eje2],type="n")
axis(side=1, pos= 0, labels = F)
axis(side=3, pos= 0, labels = F)
axis(side=2, pos= 0, labels = F)
axis(side=4, pos= 0, labels = F)
arrows(ze, ze, X, Y, length = 0.07,col="blue")
text(X,Y,labels=etiq,col="darkblue", cex=0.7)
plot(Psi[,eje1],Psi[,eje2],type="n", xlim = c(0.94,0.96), ylim = c(0.02, 0.05),
xlab = "Economic stability", ylab='# Family members', main =
"Numerical Variables on Factorial plane of PC1 and PC2")
axis(side=1, pos= 0, labels = F)
axis(side=3, pos= 0, labels = F)
axis(side=2, pos= 0, labels = F)
axis(side=4, pos= 0, labels = F)
arrows(ze, ze, X, Y, length = 0.07,col="blue")
text(X,Y,labels=etiq,col="darkblue", cex=0.7)
plot(Psi[,eje1],Psi[,eje2],type="n", xlim = c(0.94,0.96), ylim = c(0.02, 0.05),
xlab = "Economic stability", ylab='# Family members', main =
"Price and credit on Factorial plane of PC1 and PC2")
axis(side=1, pos= 0, labels = F)
axis(side=3, pos= 0, labels = F)
axis(side=2, pos= 0, labels = F)
axis(side=4, pos= 0, labels = F)
arrows(ze, ze, X, Y, length = 0.07,col="blue")
text(X,Y,labels=etiq,col="darkblue", cex=0.7)
100*(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2]
barplot(100*(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2], main =
'Inertia of principal components',
names.arg = c("PC1", "PC2", "PC3", "PC4", "PC5",
"PC6", "PC7", "PC8"), ylab = "Inertia (%)")
axis(side=2, at=(seq(0, 100, by=10)), labels = FALSE)
barplot_x <- barplot(100*(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2], main =
'Inertia of principal components',
names.arg = c("PC1", "PC2", "PC3", "PC4", "PC5",
"PC6", "PC7", "PC8"), ylab = "Inertia (%)")
axis(side=2, at=(seq(0, 100, by=10)), labels = FALSE)
barplot_y <- as.matrix(100*(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2])
text(x,y+2,labels=as.character(y))
barplot_x <- barplot(100*(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2], main =
'Inertia of principal components',
names.arg = c("PC1", "PC2", "PC3", "PC4", "PC5",
"PC6", "PC7", "PC8"), ylab = "Inertia (%)")
axis(side=2, at=(seq(0, 100, by=10)), labels = FALSE)
barplot_y <- as.matrix(100*(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2])
text(barplot_x,barplot_y+2,labels=as.character(y))
barplot_x <- barplot(100*(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2], main =
'Inertia of principal components',
names.arg = c("PC1", "PC2", "PC3", "PC4", "PC5",
"PC6", "PC7", "PC8"), ylab = "Inertia (%)")
axis(side=2, at=(seq(0, 100, by=10)), labels = FALSE)
barplot_y <- as.matrix(100*(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2])
text(barplot_x,barplot_y+2,labels=as.character(barplot_y))
barplot_x <- barplot(100*(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2], main =
'Inertia of principal components',
names.arg = c("PC1", "PC2", "PC3", "PC4", "PC5",
"PC6", "PC7", "PC8"), ylab = "Inertia (%)")
axis(side=2, at=(seq(0, 100, by=10)), labels = FALSE)
barplot_y <- round(as.matrix(100*(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2]), digits = 1)
text(barplot_x,barplot_y+2,labels=as.character(barplot_y))
barplot_x <- barplot(100*(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2], main =
'Inertia of principal components',
names.arg = c("PC1", "PC2", "PC3", "PC4", "PC5",
"PC6", "PC7", "PC8"), ylab = "Inertia (%)", ylim = 40)
barplot_x <- barplot(100*(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2], main =
'Inertia of principal components',
names.arg = c("PC1", "PC2", "PC3", "PC4", "PC5",
"PC6", "PC7", "PC8"), ylab = "Inertia (%)", ylim = (0,40)
barplot_x <- barplot(100*(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2], main =
'Inertia of principal components',
names.arg = c("PC1", "PC2", "PC3", "PC4", "PC5",
"PC6", "PC7", "PC8"), ylab = "Inertia (%)", ylim = c(0,40))
axis(side=2, at=(seq(0, 100, by=10)), labels = FALSE)
barplot_y <- round(as.matrix(100*(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2]), digits = 1)
text(barplot_x,barplot_y+2,labels=as.character(barplot_y))
barplot_x <- barplot(100*cumsum(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2], main =
'Inertia of principal components',
names.arg = c("PC1", "PC2", "PC3", "PC4", "PC5",
"PC6", "PC7", "PC8"), ylab = "Inertia (%)", ylim = c(0,40))
axis(side=2, at=(seq(0, 100, by=10)), labels = FALSE)
barplot_y <- round(as.matrix(100*(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2]), digits = 1)
text(barplot_x,barplot_y+2,labels=as.character(barplot_y))
barplot_x <- barplot(100*cumsum(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2], main =
'Inertia of principal components',
names.arg = c("PC1", "PC2", "PC3", "PC4", "PC5",
"PC6", "PC7", "PC8"), ylab = "Inertia (%)", ylim = c(0,105))
axis(side=2, at=(seq(0, 100, by=10)), labels = FALSE)
barplot_y <- round(as.matrix(100*(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2]), digits = 1)
text(barplot_x,barplot_y+2,labels=as.character(barplot_y))
barplot_x <- barplot(100*cumsum(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2], main =
'Inertia of principal components',
names.arg = c("PC1", "PC2", "PC3", "PC4", "PC5",
"PC6", "PC7", "PC8"), ylab = "Inertia (%)", ylim = c(0,105))
axis(side=2, at=(seq(0, 100, by=10)), labels = FALSE)
barplot_y <- round(as.matrix(100*(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2]), digits = 1)
text(barplot_x,barplot_y+2,labels=as.character(barplot_y))
barplot_y <- round(as.matrix(100*(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2]), digits = 1)
barplot_x <- barplot(100*cumsum(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2], main =
'Inertia of principal components',
names.arg = c("PC1", "PC2", "PC3", "PC4", "PC5",
"PC6", "PC7", "PC8"), ylab = "Inertia (%)", ylim = c(0,105))
axis(side=2, at=(seq(0, 100, by=10)), labels = FALSE)
barplot_y <- round(as.matrix(100*(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2]), digits = 1)
text(barplot_x,barplot_y+2,labels=as.character(barplot_y))
barplot_x <- barplot(100*cumsum(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2], main =
'Inertia of principal components',
names.arg = c("PC1", "PC2", "PC3", "PC4", "PC5",
"PC6", "PC7", "PC8"), ylab = "Inertia (%)", ylim = c(0,105))
axis(side=2, at=(seq(0, 100, by=10)), labels = FALSE)
barplot_y <- round(as.matrix(100*(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2]), digits = 1)
text(barplot_x,barplot_y+2,labels=as.character(barplot_y))
barplot_x <- NULL
barplot_y <- NULL
barplot_x <- barplot(100*cumsum(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2], main =
'Inertia of principal components',
names.arg = c("PC1", "PC2", "PC3", "PC4", "PC5",
"PC6", "PC7", "PC8"), ylab = "Inertia (%)", ylim = c(0,105))
axis(side=2, at=(seq(0, 100, by=10)), labels = FALSE)
barplot_y <- round(as.matrix(100*(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2]), digits = 1)
text(barplot_x,barplot_y+2,labels=as.character(barplot_y))
barplot_x <- barplot(100*cumsum(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2], main =
'Inertia of principal components',
names.arg = c("PC1", "PC2", "PC3", "PC4", "PC5",
"PC6", "PC7", "PC8"), ylab = "Inertia (%)", ylim = c(0,105))
axis(side=2, at=(seq(0, 100, by=10)), labels = FALSE)
barplot_y <- round(as.matrix(100*cumsum(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2]), digits = 1)
text(barplot_x,barplot_y+2,labels=as.character(barplot_y))
barplot_x <- barplot(100*cumsum(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2], main =
'Inertia of principal components',
names.arg = c("PC1", "PC2", "PC3", "PC4", "PC5",
"PC6", "PC7", "PC8"), ylab = "Inertia (%)", ylim = c(0,105))
axis(side=2, at=(seq(0, 100, by=10)), labels = FALSE)
barplot_y <- round(as.matrix(100*cumsum(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2]), digits = 1)
text(barplot_x,barplot_y+5,labels=as.character(barplot_y))
barplot_x <- barplot(100*cumsum(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2], main =
'Inertia of principal components',
names.arg = c("PC1", "PC2", "PC3", "PC4", "PC5",
"PC6", "PC7", "PC8"), ylab = "Inertia (%)", ylim = c(0,110))
barplot_x <- barplot(100*cumsum(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2], main =
'Inertia of principal components',
names.arg = c("PC1", "PC2", "PC3", "PC4", "PC5",
"PC6", "PC7", "PC8"), ylab = "Inertia (%)", ylim = c(0,110))
axis(side=2, at=(seq(0, 100, by=10)), labels = FALSE)
barplot_y <- round(as.matrix(100*cumsum(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2]), digits = 1)
text(barplot_x,barplot_y+5,labels=as.character(barplot_y))
barplot_x <- barplot(100*cumsum(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2], main =
'Accumulated inertia of principal components',
names.arg = c("PC1", "PC2", "PC3", "PC4", "PC5",
"PC6", "PC7", "PC8"), ylab = "Inertia (%)", ylim = c(0,110))
axis(side=2, at=(seq(0, 100, by=10)), labels = FALSE)
barplot_y <- round(as.matrix(100*cumsum(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2]), digits = 1)
text(barplot_x,barplot_y+5,labels=as.character(barplot_y))
```{r}
barplot_x <- barplot(100*cumsum(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2], main =
'Accumulated inertia of principal components',
names.arg = c("PC1", "PC2", "PC3", "PC4", "PC5",
"PC6", "PC7", "PC8"), ylab = "Inertia (%)", ylim = c(0,110))
axis(side=2, at=(seq(0, 100, by=10)), labels = FALSE)
barplot_y <- round(as.matrix(100*cumsum(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2]), digits = 1)
text(barplot_x,barplot_y+5,labels=as.character(barplot_y))
abline(80,0, col = "blue", lwd = 2, lty = 2)
barplot_x <- barplot(100*cumsum(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2], main =
'Accumulated inertia of principal components',
names.arg = c("PC1", "PC2", "PC3", "PC4", "PC5",
"PC6", "PC7", "PC8"), ylab = "Accumulated inertia (%)", ylim = c(0,110))
axis(side=2, at=(seq(0, 100, by=10)), labels = FALSE)
barplot_y <- round(as.matrix(100*cumsum(pc1$sdev[1:dim(dcon)[2]]^2)/dim(dcon)[2]), digits = 1)
text(barplot_x,barplot_y+5,labels=as.character(barplot_y))
abline(80,0, col = "blue", lwd = 2, lty = 2)
install.packages(c("htmlTable", "knitr", "RcppArmadillo", "sampling", "withr"))
x <- seq(0, 10)
x
x2 <- seq(1,10, 0.5)
x2
t(x)
t(t(x))
ls()
aggregate(x, by=ls(seq(1,10,2)), FUN="mean")
ls(x)
aggregate(x, by=ls(), FUN="mean")
aggregate(x, by=seq(1,10,2), FUN="mean")
aggregate(x, by=c(1,2), FUN="mean")
data(karate, package="igraphdata")
install.packages(igraphdata)
install.packages("igraphdata")
data(karate, package="igraphdata")
wc <- walktrap.community(karate)
install.packages("clustAnalytics")
library(clustAnalytics)
wc <- walktrap.community(karate)
mod <- modularity(wc)
mod
# Chunk 1
# Clean workspace
if(!is.null(dev.list())) dev.off()
rm(list = ls())
# Chunk 2
# Load libraries
library(car)
library(mice)
library(dplyr)
library(missMDA)
library(FactoMineR)
library(chemometrics)
library(DataExplorer)
library(corrplot)
library(MASS)
library(effects)
# Chunk 3
# Load data
df = read.csv("train_impute.csv")
setwd("C:/Users/Airdac/Documents/GitHub/SIM-Project")
# Chunk 1
# Clean workspace
if(!is.null(dev.list())) dev.off()
rm(list = ls())
# Chunk 2
# Load libraries
library(car)
library(mice)
library(dplyr)
library(missMDA)
library(FactoMineR)
library(chemometrics)
library(DataExplorer)
library(corrplot)
library(MASS)
library(effects)
# Chunk 3
# Load data
df = read.csv("train_impute.csv")
df_test = read.csv("test_impute.csv")
# Declare factors
df$OverallQual <- as.factor(df$OverallQual)
df$MSSubClass <- as.factor(df$MSSubClass)
char_var <- which(sapply(df, is.character))
df[,char_var] <- lapply(df[, char_var], as.factor)
# Declare factors
df_test$OverallQual <- as.factor(df_test$OverallQual)
df_test$MSSubClass <- as.factor(df_test$MSSubClass)
char_var <- which(sapply(df_test, is.character))
df_test[,char_var] <- lapply(df_test[, char_var], as.factor)
# Chunk 4
df_num <- df[, which(sapply(df, is.numeric))]
m0 = lm(SalePrice ~ ., data=df_num)
summary(m0)
vif(m0)
# The X1stFlrSF, X2ndFlrSF, GrLivArea, has a vif correlation bigger than 10, indicating that we'll need to do some kind of transformation or simply remove it.
# Chunk 5
# Let's store the indices of the variables with at least one star in the lm and vif<5
id_num_star1 = c(1:5,15,17,21:23)
df_num1 <- df_num[, id_num_star1]
m1 = lm(SalePrice ~., data=df_num1)
summary(m1)
vif(m1)
corr_mat <- cor(df_num1)
corrplot(corr_mat)
cor.test(df_num1$YearBuilt, df_num1$YearRemodAdd)
corr_mat
# Chunk 6
id_num_star2 = c(1:3,5,15,17,21:23)
df_num2 <- df_num[, id_num_star2]
m2 = lm(SalePrice ~., data=df_num2)
summary(m2)
vif(m2)
corr_mat <- cor(df_num2)
corrplot(corr_mat)
corr_mat
# Chunk 7
Anova(m2)
# Chunk 8
plot(m2)
# Calculate D's threshold
D_thresh <- 2/sqrt(dim(df_num2)[1]); D_thresh
#Remove the points and fit the model again
influent <- c(1183, 692, 186)
df <- df[-influent,]
df_num <- df[, which(sapply(df, is.numeric))]
df_num2 <- df_num[, id_num_star2]
m2 = lm(SalePrice ~., data=df_num2)
influencePlot(m2)
# Chunk 10
step(m2)
Anova(m2)
# Chunk 11
#residualPlots(m2)
#avPlots(m2)
#crPlot(m2)
# Chunk 12
boxcox(m2)
# We should apply log(x) to SalePrice
m3 = lm(log(SalePrice)~., data=df_num2)
summary(m3)
# Chunk 13
par(mfrow=c(2,2))
plot(m3, id.n=5)
# Chunk 14
#boxTidwell(SalePrice ~ ., data=df_num2)   THIS GIVES ERROR because most variables have null values
# We'll assign 10^(-6) to all cells equal to 0 to be able to use boxTidwell without alterating too much the model
df_num2 = replace(df_num2, df_num2 == 0, 1e-6)
summary(df_num2)
# boxTidwell(log(SalePrice)~., data=df_num2) THIS GIVES ERROR AS WELL because the model has too many variables
boxTidwell(log(SalePrice) ~ LotArea+YearBuilt+MasVnrArea, data = df_num2)
# We should apply sqrt(LotArea). The lambda for YearBuilt is too large, so it would difficult to interpet the model using it. MasVnrArea has a too large p-value, so we cannot reject the null hypothesis that lambda = 1.
boxTidwell(log(SalePrice)~LotFrontage, data = df_num2)
# Too small lambda
boxTidwell(log(SalePrice)~BedroomAbvGr, data = df_num2)
# Too large p-value
boxTidwell(log(SalePrice)~Fireplaces, data =df_num2)
# We apply log() to Fireplaces
boxTidwell(log(SalePrice)~WoodDeckSF, data = df_num2)
# We apply sqrt() to WoodDeckSF
boxTidwell(log(SalePrice)~OpenPorchSF, data = df_num2)
# Too small lambda
# Chunk 15
m4 = lm(log(SalePrice) ~ LotFrontage+sqrt(LotArea)+YearBuilt+MasVnrArea+
BedroomAbvGr+log(Fireplaces)+sqrt(WoodDeckSF)+OpenPorchSF,
data=df_num2)
summary(m4)
plot(m4)
# Chunk 16
AIC(m3, m4)
BIC(m3, m4)
# Chunk 17
m5 = lm(log(SalePrice) ~ LotFrontage+LotArea+YearBuilt+MasVnrArea+
BedroomAbvGr+log(Fireplaces)+sqrt(WoodDeckSF)+OpenPorchSF,
data=df_num2)
summary(m5)
AIC(m4,m5)
BIC(m4,m5)
# Chunk 18
m6 = lm(log(SalePrice) ~ LotFrontage+sqrt(LotArea)+YearBuilt+MasVnrArea+
BedroomAbvGr+Fireplaces+sqrt(WoodDeckSF)+OpenPorchSF,
data=df_num2)
summary(m6)
AIC(m4,m6)
BIC(m4,m6)
# Chunk 19
m7 = lm(log(SalePrice) ~ LotFrontage+sqrt(LotArea)+YearBuilt+MasVnrArea+
BedroomAbvGr+log(Fireplaces)+WoodDeckSF+OpenPorchSF,
data=df_num2)
summary(m7)
AIC(m4,m7)
BIC(m4,m7)
# Chunk 20
m8 = lm(log(SalePrice)~LotFrontage+sqrt(LotArea)+YearBuilt+MasVnrArea
+BedroomAbvGr+Fireplaces+WoodDeckSF+OpenPorchSF,
data=df_num2); summary(m8)
m9 = lm(log(SalePrice)~LotFrontage+LotArea+YearBuilt+MasVnrArea
+BedroomAbvGr+log(Fireplaces)+WoodDeckSF+OpenPorchSF,
data=df_num2); summary(m9)
m10 = lm(log(SalePrice)~LotFrontage+LotArea+YearBuilt+MasVnrArea
+BedroomAbvGr+Fireplaces+sqrt(WoodDeckSF)+OpenPorchSF,
data=df_num2); summary(m10)
AIC(m4,m10)
# Chunk 21
m11 = lm(log(SalePrice) ~ LotFrontage+sqrt(LotArea)+YearBuilt+MasVnrArea+
BedroomAbvGr+Fireplaces+sqrt(WoodDeckSF)+OpenPorchSF,
data=df_num)
BIC(m3,m11)
plot(m11)
# Chunk 22
#OverallQual, ExterQual, BsmtQual, KitchenQual, Neighborhood, GarageFinish
#FireplaceQu, Foundation, GarageType and MSSubClass
m12 = lm(log(SalePrice)~LotFrontage+sqrt(LotArea)+YearBuilt+MasVnrArea+
BedroomAbvGr+Fireplaces+sqrt(WoodDeckSF)+OpenPorchSF+OverallQual,
data=df); summary(m12)
BIC(m10,m12)
Anova(m12)
step(m12, k = log(nrow(df)))
# Chunk 23
m12.1 = lm(log(SalePrice)~sqrt(LotArea)+YearBuilt+MasVnrArea+
BedroomAbvGr+Fireplaces+sqrt(WoodDeckSF)+OpenPorchSF+OverallQual,
data=df); summary(m12.1)
BIC(m10,m12,m12.1)
# Chunk 24
m13 = lm(log(SalePrice)~sqrt(LotArea)+YearBuilt+MasVnrArea+
BedroomAbvGr+Fireplaces+sqrt(WoodDeckSF)+OpenPorchSF+OverallQual+ExterQual,
data=df); summary(m13)
BIC(m13,m12.1,m11)
Anova(m13)
step(m13, k = log(nrow(df)))
# Chunk 25
m14 = lm(log(SalePrice)~sqrt(LotArea)+YearBuilt+MasVnrArea+
BedroomAbvGr+Fireplaces+sqrt(WoodDeckSF)+OpenPorchSF+OverallQual+ExterQual+BsmtQual,
data=df); summary(m14)
BIC(m14,m13,m12.1,m12,m11)
Anova(m14)
step(m14, k = log(nrow(df)))
# Chunk 26
m15 = lm(log(SalePrice)~sqrt(LotArea)+YearBuilt+MasVnrArea+
BedroomAbvGr+Fireplaces+sqrt(WoodDeckSF)+OpenPorchSF+OverallQual+ExterQual+BsmtQual+KitchenQual,
data=df); summary(m15)
BIC(m15,m14,m13,m12.1,m12,m11)
Anova(m15)
step(m15, k = log(nrow(df)))
# Chunk 27
m15.1 = lm(log(SalePrice)~sqrt(LotArea)+YearBuilt+MasVnrArea+
BedroomAbvGr+Fireplaces+sqrt(WoodDeckSF)+OpenPorchSF+OverallQual+BsmtQual+KitchenQual,
data=df); summary(m15.1)
BIC(m15.1,m15,m14,m13,m12.1,m12,m11)
Anova(m15.1)
step(m15.1, k = log(nrow(df)))
# Chunk 28
m16 = lm(log(SalePrice)~sqrt(LotArea)+YearBuilt+MasVnrArea+
BedroomAbvGr+Fireplaces+sqrt(WoodDeckSF)+OpenPorchSF+OverallQual+BsmtQual+KitchenQual+Neighborhood, data=df); summary(m16)
BIC(m16,m15.1,m15,m14,m13,m12.1,m12,m11)
Anova(m16)
step(m16, k = log(nrow(df)))
# Chunk 29
m17 = lm(log(SalePrice)~sqrt(LotArea)+MasVnrArea+
BedroomAbvGr+Fireplaces+sqrt(WoodDeckSF)+OpenPorchSF+YearBuilt*OverallQual+BsmtQual+KitchenQual, data=df); summary(m17)
BIC(m17,m16,m15.1,m15,m14,m13,m12.1,m12,m11)
Anova(m17)
step(m17, k = log(nrow(df)))
# Chunk 30
m18 = lm(log(SalePrice)~MasVnrArea+
BedroomAbvGr+Fireplaces+sqrt(WoodDeckSF)+OpenPorchSF+YearBuilt*OverallQual+sqrt(LotArea)*YearBuilt+OverallQual+BsmtQual+KitchenQual, data=df); summary(m18)
BIC(m18,m17,m16,m15.1,m15,m14,m13,m12.1,m12,m11)
Anova(m18)
step(m18, k = log(nrow(df)))
# Chunk 31
predicted_values = predict.lm(m15.1, df_test, se.fit=TRUE, interval="prediction", level=0.95)
test_price = exp(predicted_values$fit)
hist(test_price[,1])
hist(test_price[,2])
hist(test_price[,3])
# Chunk 32
par(mfrow=c(1,2))
hist(test_price[,1], main = "Distribution of Predicted Sale Price on Test", xlab =  "Predicted test$SalePrice")
hist(df$SalePrice, main = "Distribution of Sale Price on Train", xlab = "Real train$SalePrice")
# Chunk 33
par(mfrow=c(1,1))
plot(density(test_price[,1]), col="red", main = "Density of SalePrice", xlab = "SalePrice")
lines(density(df$SalePrice), col="blue")
legend("topright",fill = c("red", "blue"), c("Predicted on Test","Real on Train"))
# Chunk 34
marginalModelPlots(m15.1, id=list(n=0))
# Chunk 35
residualPlots( m15.1, id=list(n=0))
kruskal.test(test_price[,1], df$SalePrice)
test_price[,1]
lenght(test[,1])
length(test[,1])
length(test_price[,1])
length(df$SalePrice)
pairwise.t.test(test_price[,1], df$SalePrice)
pairwise.t.test(test_price[1:1445,1], df$SalePrice)
pairwise.t.test(test_price[1:1445,1], df$SalePrice[1:1445,])
SalePrice[1:1445]
df$SalePrice[1:1445]
pairwise.t.test(test_price[1:1445,1], df$SalePrice[1:1445,])
pairwise.t.test(test_price[1:1445,1], df$SalePrice[1:1445])
ks_test_result <- ks.test(test_price[,1], df$SalePrice)
ks_test_result
kruskal.test(test_price[,1],df$SalePrice)
kruskal.test(test_price[,1],df$SalePrice[1:1445])
kruskal.test(test_price[1:1445,1],df$SalePrice)
tapply(test_price[,1],df$SalePrice, summary)
kruskal.test(test_price[1:1445,1],df$SalePrice)
tapply(test_price[1:1445,1],df$SalePrice, summary)
pairwise.wilcox.test(test_price[1:1445,1],df$SalePrice)
shapiro.test(test_price[1:1445,1],df$SalePrice)
shapiro.test(test_price[1:1445,1])
# Tests for normality (done in all numerical variables)
ks.test(train$LotArea, y = 'pnorm')
# Chunk 1
# Clean workspace
if(!is.null(dev.list())) dev.off()
rm(list = ls())
# Chunk 2
# Load libraries
library(car)
library(mice)
library(dplyr)
library(missMDA)
library(FactoMineR)
library(chemometrics)
library(DataExplorer)
library(corrplot)
library(MASS)
library(effects)
df_num <- df[, which(sapply(df, is.numeric))]
df_num <- df[, which(sapply(df, is.numeric))]
